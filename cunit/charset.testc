#include <stdlib.h>

#include "cunit/cunit.h"
#include "charset.h"

extern int charset_debug;

/* The Unicode Replacement character 0xfffd in UTF-8 encoding */
#define UTF8_REPLACEMENT    "\357\277\275"
/* The Replacement char after search normalisation */
#define SEARCH_REPLACEMENT  "\377"

static void test_lookupname(void)
{
    int cs, cs2;

    /* us-ascii must exist */
    cs = charset_lookupname("us-ascii");
    CU_ASSERT(cs >= 0);

    /* names are case-insensitive */
    cs2 = charset_lookupname("US-ASCII");
    CU_ASSERT(cs2 >= 0);
    CU_ASSERT_EQUAL(cs, cs2);

    cs2 = charset_lookupname("Us-AsCiI");
    CU_ASSERT(cs2 >= 0);
    CU_ASSERT_EQUAL(cs, cs2);

    /* some others must also exist */
    cs = charset_lookupname("utf-8");
    CU_ASSERT(cs >= 0);

    cs = charset_lookupname("utf-7");
    CU_ASSERT(cs >= 0);

    cs = charset_lookupname("iso-8859-1");
    CU_ASSERT(cs >= 0);
}

static void test_to_utf8(void)
{
    int cs;
    char *s;
    static const char ASCII_1[] = "Hello World";
    static const char ASCII_2[] = "Hello W\370rld";
    static const char UTF8_2[] = "Hello W" UTF8_REPLACEMENT "rld";
    static const char BASE64_3[] = "SGVsbG8gV29ybGQ=";
    static const char QP_4[] =
"If you believe that truth=3Dbeauty, then surely=20=\r\n"
"mathematics is the most beautiful branch of philosophy.\r\n";
    static const char ASCII_4[] =
"If you believe that truth=beauty, then surely "
"mathematics is the most beautiful branch of philosophy.\r\n";

    cs = charset_lookupname("us-ascii");
    CU_ASSERT(cs >= 0);

    /* zero length input */
    s = charset_to_utf8("", 0, cs, ENCODING_NONE);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, "");
    free(s);

    /* invalid encoding */
    s = charset_to_utf8(ASCII_1, sizeof(ASCII_1), cs, 0xdeadbeef);
    CU_ASSERT_PTR_NULL(s);

    /* invalid charset */
    s = charset_to_utf8(ASCII_1, sizeof(ASCII_1), 0xdeadbeef, ENCODING_NONE);
    CU_ASSERT_PTR_NULL(s);

    /* simple ASCII string */
    s = charset_to_utf8(ASCII_1, sizeof(ASCII_1)-1, cs, ENCODING_NONE);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, ASCII_1);
    free(s);

    /* ASCII string with an invalid character */
    s = charset_to_utf8(ASCII_2, sizeof(ASCII_2)-1, cs, ENCODING_NONE);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, UTF8_2);
    free(s);

    /* base64 encoding */
    s = charset_to_utf8(BASE64_3, sizeof(BASE64_3)-1, cs, ENCODING_BASE64);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, ASCII_1);
    free(s);

    /* Quoted-printable encoding */
    s = charset_to_utf8(QP_4, sizeof(QP_4)-1, cs, ENCODING_QP);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, ASCII_4);
    free(s);
}

static void test_qp(void)
{
    /* corner cases in Quoted-Printable */
#define TESTCASE(in, cs, enc, exp) \
    { \
	static const char _in[] = (in); \
	static const char _exp[] = (exp); \
	int _cs = (cs); \
	int _enc = (enc); \
	char *s = charset_to_utf8(_in, sizeof(_in)-1, _cs, _enc); \
	CU_ASSERT_PTR_NOT_NULL(s); \
	CU_ASSERT_STRING_EQUAL(s, _exp); \
	free(s); \
    }

    /* encoding of SP */
    TESTCASE("ab=20xy", 0, ENCODING_QP, "ab xy");

    /* encoding of '=' */
    TESTCASE("ab=3Dxy", 0, ENCODING_QP, "ab=xy");

    /* lowercase also */
    TESTCASE("ab=3dxy", 0, ENCODING_QP, "ab=xy");

    /* underscore is not special outside of headers */
    TESTCASE("ab_xy", 0, ENCODING_QP, "ab_xy");

    /* invalid characters after = are passed through
     * even if one of them is a valid hexchar */
    TESTCASE("ab=ZZxy", 0, ENCODING_QP, "ab=ZZxy");
    TESTCASE("ab=ZCxy", 0, ENCODING_QP, "ab=ZCxy");
    TESTCASE("ab=CZxy", 0, ENCODING_QP, "ab=CZxy");
    TESTCASE("ab=Zcxy", 0, ENCODING_QP, "ab=Zcxy");
    TESTCASE("ab=cZxy", 0, ENCODING_QP, "ab=cZxy");

    /* soft line break */
    TESTCASE("ab=\r\nxy", 0, ENCODING_QP, "abxy");

#undef TESTCASE
}


static void test_decode_mimeheader(void)
{
    char *s;
    static const char ASCII_1[] = "Lorem IPSUM dolor \t \t  sit amet";
    static const char SEARCH_1[] = "LOREM IPSUM DOLOR SIT AMET";
    static const char ASCII_B64_2[] = "Lorem =?us-ascii?q?ipsum?= dolor "
				      "=?US-ASCII?Q?sit amet?=";
    static const char ASCII_B64_3[] = "Lorem =?iso-8859-1?q?ips=fcm?= \t"
				      "DOLOR =?iso-8859-1?Q?s=eft am=ebt?=";
    static const char SEARCH_3[] = "LOREM IPSUM DOLOR SIT AMET";
    static const char SEARCH_3b[] = "LOREM IPSÜM DOLOR SÏT AMËT";
    static const char SEARCH_3c[] = "LOREMIPSUMDOLORSITAMET";
    static const char SEARCH_3d[] = "LOREMIPSÜMDOLORSÏTAMËT";
    static const char SEARCH_3e[] = "LOREM IPSÜM  DOLOR SÏT AMËT";
    int flags = CHARSET_SKIPDIACRIT | CHARSET_MERGESPACE; /* default */

    s = charset_decode_mimeheader(NULL, flags);
    CU_ASSERT_PTR_NULL(s);
    free(s);

    s = charset_decode_mimeheader("", flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, "");
    free(s);

    s = charset_decode_mimeheader(ASCII_1, flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, SEARCH_1);
    free(s);

    s = charset_decode_mimeheader(ASCII_B64_2, flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, SEARCH_1);
    free(s);

    s = charset_decode_mimeheader(ASCII_B64_3, flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, SEARCH_3);
    free(s);

    flags = CHARSET_MERGESPACE;
    s = charset_decode_mimeheader(ASCII_B64_3, flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, SEARCH_3b);
    free(s);

    flags = CHARSET_SKIPSPACE | CHARSET_SKIPDIACRIT;
    s = charset_decode_mimeheader(ASCII_B64_3, flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, SEARCH_3c);
    free(s);

    flags = CHARSET_SKIPSPACE;
    s = charset_decode_mimeheader(ASCII_B64_3, flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, SEARCH_3d);
    free(s);

    flags = 0;
    s = charset_decode_mimeheader(ASCII_B64_3, flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, SEARCH_3e);
    free(s);
}

static void test_mimeheader_badcharset(void)
{
    /* when given an unknown charset, the entire word is
     * replaced with a single Unicode replacement char */
    char *s;
    static const char ASCII_1[] = "A =?EUC-KR?B?wMzIo8Dn?= B";
    static const char SEARCH_1[] = "A " UTF8_REPLACEMENT "B";
    int flags = CHARSET_SKIPDIACRIT | CHARSET_MERGESPACE; /* default */

    s = charset_decode_mimeheader(ASCII_1, flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, SEARCH_1);
    free(s);
}

static void test_mime_unfold(void)
{
    char *s;

    /* Test unfolding and the 'keep' space option.  Note that 'keep' is
     * a bit of a misnomer, it actually converts whitespace characters
     * to SP before keeping the same *number* of chars, which is
     * actually quite unhelpful.
     */
    s = charset_decode_mimeheader(
"From: foo@bar\r\n"
"To: baz@quux\r\n"
"Subject: this\r\n"
"\tline is continued\r\n"
"Keywords: and\r\n"
"\tso is\r\n"
" this one\r\n"
"\r\n",
    CHARSET_SKIPDIACRIT);
    CU_ASSERT_STRING_EQUAL(s,
"FROM: FOO@BAR  "
"TO: BAZ@QUUX  "
"SUBJECT: THIS LINE IS CONTINUED  "
"KEYWORDS: AND SO IS THIS ONE  "
"  "
    );
    free(s);

    /* test unfolding and the 'merge' space option which merges any
     * amount of whitespace down to a single SP character */
    s = charset_decode_mimeheader(
"From: foo@bar\r\n"
"To: baz@quux\r\n"
"Subject: this\r\n"
"\tline is continued\r\n"
"Keywords: and\r\n"
"\tso is\r\n"
" this one\r\n"
"\r\n",
    CHARSET_SKIPDIACRIT|CHARSET_MERGESPACE);
    CU_ASSERT_STRING_EQUAL(s,
"FROM: FOO@BAR "
"TO: BAZ@QUUX "
"SUBJECT: THIS LINE IS CONTINUED "
"KEYWORDS: AND SO IS THIS ONE "
    );
    free(s);

    /* test unfolding and the 'skip' space option which elides
     * all whitespace. */
    s = charset_decode_mimeheader(
"From: foo@bar\r\n"
"To: baz@quux\r\n"
"Subject: this\r\n"
"\tline is continued\r\n"
"Keywords: and\r\n"
"\tso is\r\n"
" this one\r\n"
"\r\n",
    CHARSET_SKIPDIACRIT|CHARSET_SKIPSPACE);
    CU_ASSERT_STRING_EQUAL(s,
"FROM:FOO@BAR"
"TO:BAZ@QUUX"
"SUBJECT:THISLINEISCONTINUED"
"KEYWORDS:ANDSOISTHISONE"
    );
    free(s);
}

static void test_search_mimeheader(void)
{
    char *s;
    comp_pat *pat;
    static const char SUBJECT_CP1252[] = "=?Cp1252?Q?Herzlichen_Gl=FCckwunsch,_der_Artikel_Canon_Ob?= "
				         "=?Cp1252?Q?jektiv_EF-S_18-55_mm_1:3,5-5,6_geh=F6rt_Ihnen!?=";
    static const char SEARCH_CP1252[] = "Herzlichen";
    int flags = CHARSET_SKIPDIACRIT | CHARSET_MERGESPACE; /* default */

    s = charset_convert(SEARCH_CP1252, 0, flags);
    pat = charset_compilepat(s);
    CU_ASSERT(charset_search_mimeheader(s, pat, SUBJECT_CP1252, flags));
    charset_freepat(pat);
    free(s);
}

static void test_rfc5051(void)
{
    /* Example: codepoint U+01C4 (LATIN CAPITAL LETTER DZ WITH CARON)
     * has a titlecase property of U+01C5 (LATIN CAPITAL LETTER D
     * WITH SMALL LETTER Z WITH CARON).  Codepoint U+01C5 has a
     * decomposition property of U+0044 (LATIN CAPITAL LETTER D)
     * U+017E (LATIN SMALL LETTER Z WITH CARON).  U+017E has a
     * decomposition property of U+007A (LATIN SMALL LETTER Z) U+030c
     */
    char *s;
    static const char STR_RFC5051[] = {0xc7, 0x84, 0};
    static const char RES_RFC5051[] = {'D', 'z', 0xcc, 0x8c, 0};
    int flags = 0; /* super complient */

    s = charset_convert(STR_RFC5051, charset_lookupname("utf-8"), flags);
    CU_ASSERT_PTR_NOT_NULL(s);
    CU_ASSERT_STRING_EQUAL(s, RES_RFC5051);
    free(s);
}

struct text_rock {
    int ncalls;
    struct buf out;
};

static void append_text(const struct buf *text, void *rock)
{
    struct text_rock *tr = (struct text_rock *)rock;

    tr->ncalls++;
    buf_append(&tr->out, text);
}

#define TESTCASE(in, cs, enc, st, exp) \
    { \
	static const char _in[] = (in); \
	static int _cs = (cs); \
	int _enc = (enc); \
	static const char _st[] = (st); \
	static const char _exp[] = (exp); \
	struct buf bin = BUF_INITIALIZER; \
	struct text_rock tr; \
	int r; \
 \
	memset(&tr, 0, sizeof(tr)); \
	buf_init_ro(&bin, _in, sizeof(_in)-1); \
 \
	r = charset_extract(append_text, &tr, &bin, _cs, _enc, _st, flags); \
	CU_ASSERT_EQUAL(r, 1); \
	CU_ASSERT_EQUAL(tr.ncalls, 1); \
	CU_ASSERT_STRING_EQUAL(buf_cstring(&tr.out), _exp); \
 \
	buf_free(&bin); \
	buf_free(&tr.out); \
    }

static void test_extract(void)
{
    int flags = CHARSET_SKIPDIACRIT | CHARSET_MERGESPACE; /* default */
    /* data thanks to hipsteripsum.me */

    /* simplest case - no space, plain text is capitalised */
    TESTCASE("freegan", 0, ENCODING_NONE, "PLAIN", "FREEGAN");

    /* capitalised text is still capitalised */
    TESTCASE("FANNY PACK", 0, ENCODING_NONE, "PLAIN", "FANNY PACK");

    /* single spaces become single spaces */
    TESTCASE("before they sold out",
	     0, ENCODING_NONE, "PLAIN",
	     "BEFORE THEY SOLD OUT");

    /* multiple spaces are squashed to a single spaces */
    TESTCASE("you    probably \t haven't\r\nheard\t\r\tof them",
	     0, ENCODING_NONE, "PLAIN",
	     "YOU PROBABLY HAVEN'T HEARD OF THEM");

    /* invalid UTF-8 bytes become the Replacement character */
    TESTCASE("a\300b", 0, ENCODING_NONE, "PLAIN", /* 0xC0 */
	     "A"UTF8_REPLACEMENT"B");
    TESTCASE("a\301b", 0, ENCODING_NONE, "PLAIN", /* 0xC1 */
	     "A"UTF8_REPLACEMENT"B");
    TESTCASE("a\365b", 0, ENCODING_NONE, "PLAIN", /* 0xF5 */
	     "A"UTF8_REPLACEMENT"B");
    TESTCASE("a\366b", 0, ENCODING_NONE, "PLAIN", /* 0xF6 */
	     "A"UTF8_REPLACEMENT"B");
    TESTCASE("a\367b", 0, ENCODING_NONE, "PLAIN", /* 0xF7 */
	     "A"UTF8_REPLACEMENT"B");
    TESTCASE("a\370b", 0, ENCODING_NONE, "PLAIN", /* 0xF8 */
	     "A"UTF8_REPLACEMENT"B");
    TESTCASE("a\371b", 0, ENCODING_NONE, "PLAIN", /* 0xF9 */
	     "A"UTF8_REPLACEMENT"B");
    TESTCASE("a\372b", 0, ENCODING_NONE, "PLAIN", /* 0xFA */
	     "A"UTF8_REPLACEMENT"B");
    TESTCASE("a\373b", 0, ENCODING_NONE, "PLAIN", /* 0xFB */
	     "A"UTF8_REPLACEMENT"B");
    TESTCASE("a\374b", 0, ENCODING_NONE, "PLAIN", /* 0xFC */
	     "A"UTF8_REPLACEMENT"B");
    TESTCASE("a\375b", 0, ENCODING_NONE, "PLAIN", /* 0xFD */
	     "A"UTF8_REPLACEMENT"B");
    TESTCASE("a\376b", 0, ENCODING_NONE, "PLAIN", /* 0xFE */
	     "A"UTF8_REPLACEMENT"B");
    TESTCASE("a\377b", 0, ENCODING_NONE, "PLAIN", /* 0xFF */
	     "A"UTF8_REPLACEMENT"B");

    /* ill-formed UTF-8 sequences become the Replacement character */

    /* 2-byte sequence lead byte then a non-continuation byte */
    TESTCASE("a\302bcd", 0, ENCODING_NONE, "PLAIN",
	     "A"UTF8_REPLACEMENT"BCD");
    /* 3-byte sequence lead byte then a non-continuation byte */
    TESTCASE("a\340bcde", 0, ENCODING_NONE, "PLAIN",
	     "A"UTF8_REPLACEMENT"BCDE");
    /* 4-byte sequence lead byte then a non-continuation byte */
    TESTCASE("a\360bcdef", 0, ENCODING_NONE, "PLAIN",
	     "A"UTF8_REPLACEMENT"BCDEF");
    /* unexpected continuation byte */
    TESTCASE("a\240bc", 0, ENCODING_NONE, "PLAIN",
	     "A"UTF8_REPLACEMENT"BC");

    /* HTML: correctly formed balanced tag pairs */
    TESTCASE("<bold>Photo</bold> <em>booth</em>",
	0, ENCODING_NONE, "HTML",
	"PHOTO BOOTH");

    /* HTML: unbalanced tags */
    TESTCASE("<bold>American<bold> <bold>Apparel</bold>",
	0, ENCODING_NONE, "HTML",
	"AMERICAN APPAREL");

    /* HTML: OMITTAG tags with and without end tags */
    TESTCASE("<hr>Terry<hr> <hr>Richardson</hr>",
	0, ENCODING_NONE, "HTML",
	"TERRY RICHARDSON");

    /* HTML: quoted tag parameters */
    TESTCASE("<a href=\"foo.html\">leggings</a> <img src\"beer.jpg\">gastropub",
	0, ENCODING_NONE, "HTML",
	"LEGGINGS GASTROPUB");

    /* HTML: unquoted tag parameters */
    TESTCASE("<a href=foo.html>biodiesel</a> <img srcbeer.jpg>seitan",
	0, ENCODING_NONE, "HTML",
	"BIODIESEL SEITAN");

    /* HTML: contents of SCRIPT tag */
    TESTCASE("viral <script>bicycle rights</script>readymade",
	0, ENCODING_NONE, "HTML",
	"VIRAL READYMADE");

    /* HTML: HTML4 SCRIPT tag with no contents */
    TESTCASE("cardigan <script type=\"text/javascript\" "
	     "src=\"truffaut.js\"></script>williamsburg",
	0, ENCODING_NONE, "HTML",
	"CARDIGAN WILLIAMSBURG");

    /* HTML: XHTML SCRIPT empty-element-tag aka self-closing tag */
    TESTCASE("brunch <script type=\"text/javascript\" "
	     "src=\"cred.js\"/>shoreditch",
	0, ENCODING_NONE, "HTML",
	"BRUNCH SHOREDITCH");

    /* HTML: contents of STYLE tag */
    TESTCASE("pickled <style>whatever tumblr</style>stumptown",
	0, ENCODING_NONE, "HTML",
	"PICKLED STUMPTOWN");

    /* HTML: comments, correctly formed */
    TESTCASE("pinterest <!-- master cleanse -->forage",
	0, ENCODING_NONE, "HTML",
	"PINTEREST FORAGE");

    /* HTML: comments correctly formed with embedded -- */
    TESTCASE("polaroid <!-- food -- truck -->letterpress",
	0, ENCODING_NONE, "HTML",
	"POLAROID LETTERPRESS");

    /* HTML: comments correctly formed with embedded tags */
    TESTCASE("semiotics <!-- messenger <hr> bag -->scenester",
	0, ENCODING_NONE, "HTML",
	"SEMIOTICS SCENESTER");

    /* HTML: comments correctly formed with embedded -> */
    TESTCASE("butcher <!-- cosby -> sweater -->whatever",
	0, ENCODING_NONE, "HTML",
	"BUTCHER WHATEVER");

    /* HTML: comments correctly formed with ---> ending */
    TESTCASE("ennui <!-- art party --->keffiyeh",
	0, ENCODING_NONE, "HTML",
	"ENNUI KEFFIYEH");

    /* HTML: trivial comment */
    TESTCASE("street <!-->art",
	0, ENCODING_NONE, "HTML",
	"STREET ART");

    /* HTML: initial DOCTYPE is ignored */
    TESTCASE("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" "
	     "\"http://www.w3.org/TR/html4/strict.dtd\">ethnic sustainable",
	0, ENCODING_NONE, "HTML",
	"ETHNIC SUSTAINABLE");

    /* HTML: simple character references */
    TESTCASE("&quot;Twee &amp; Keytar&quot; &lt;dreamcatcher@umami.org&gt;",
	0, ENCODING_NONE, "HTML",
	"\"TWEE & KEYTAR\" <DREAMCATCHER@UMAMI.ORG>");

    /* HTML: naked & is emitted */
    TESTCASE("gentrify&<bold>sartorial</bold>",
	0, ENCODING_NONE, "HTML",
	"GENTRIFY&SARTORIAL");

    /* HTML: non-zero length unterminated entities are emitted */
    TESTCASE("tattooed&amp locavore",
	0, ENCODING_NONE, "HTML",
	"TATTOOED& LOCAVORE");

    /* HTML: decimal Unicode entities: U+267B RECYCLE SYMBOL */
    TESTCASE("odd&#9851;future",
	0, ENCODING_NONE, "HTML",
	"ODD♻FUTURE");

    /* HTML: hexadecimal Unicode entities: U+2704 SCISSORS */
    TESTCASE("odd&#x2704;future",
	0, ENCODING_NONE, "HTML",
	"ODD✄FUTURE");

    /* HTML: compatibility numerical character references */
    TESTCASE(
	"A&#128;B&#129;C&#130;D&#131;"
	"E&#132;F&#133;G&#134;H&#135;"
	"I&#136;J&#137;K&#138;L&#139;"
	"M&#140;N&#141;O&#142;P&#143;"
	"Q&#144;R&#145;S&#146;T&#147;"
	"U&#148;V&#149;W&#150;X&#151;"
	"Y&#152;Z&#153;A&#154;B&#155;"
	"C&#156;D&#157;E&#158;F&#159;g",
	0, ENCODING_NONE, "HTML",
	"A€BC‚DƑ"	/* ƒ capitalised */
	"E„F...G†H‡"	/* … normalised to ... */
	"IˆJ‰KSL‹"	/* Š normalised to S */
	"MŒNOZP"	/* Ž normalised to Z */
	"QR‘S’T“"
	"U”V•W–X—"
	"Y˜ZTMASB›"	/* š capitalised then normalised to S,
			 * ™ normalised to TM */
	"CŒDEZFYG")	/* œ capitalised to Œ,
			   ž capitalised then normalised to Z,
			 * Ÿ normalised to Y */

    /* HTML: numerical character references to invalid Unicode
     * codepoints and valid codepoints just adjacent to invalid
     * ranges.  HTML5 requires us to emit a Replacement char. */
    TESTCASE("A&#xd7ff;B", 0, ENCODING_NONE, "HTML", "A\355\237\277B");
    TESTCASE("A&#xd800;B", 0, ENCODING_NONE, "HTML", "A"UTF8_REPLACEMENT"B");
    TESTCASE("A&#xd801;B", 0, ENCODING_NONE, "HTML", "A"UTF8_REPLACEMENT"B");
    TESTCASE("A&#xdffe;B", 0, ENCODING_NONE, "HTML", "A"UTF8_REPLACEMENT"B");
    TESTCASE("A&#xdfff;B", 0, ENCODING_NONE, "HTML", "A"UTF8_REPLACEMENT"B");
    TESTCASE("A&#xc000;B", 0, ENCODING_NONE, "HTML", "A\354\200\200B");
    TESTCASE("A&#x10fffd;B", 0, ENCODING_NONE, "HTML", "A\364\217\277\275B");
    TESTCASE("A&#x110000;B", 0, ENCODING_NONE, "HTML", "A"UTF8_REPLACEMENT"B");
    TESTCASE("A&#x7fffffff;B", 0, ENCODING_NONE, "HTML", "A"UTF8_REPLACEMENT"B");
    TESTCASE("A&#xffffffff;B", 0, ENCODING_NONE, "HTML", "A"UTF8_REPLACEMENT"B");

    /* HTML: zero numerical character reference.  The HTML5 spec says
     * to return a Replacement char. */
    TESTCASE("A&#0;B", 0, ENCODING_NONE, "HTML", "A"UTF8_REPLACEMENT"B");

    /* HTML: numerical character references whose codepoints the HTML5
     * spec says are a parse error.  We just silently swallow these. */
    /* U+0001..U+0008 */
    TESTCASE("A&#1;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#8;B", 0, ENCODING_NONE, "HTML", "AB");
    /* U+000B */
    TESTCASE("A&#xb;B", 0, ENCODING_NONE, "HTML", "AB");
    /* U+000E..U+001F */
    TESTCASE("A&#xe;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x1f;B", 0, ENCODING_NONE, "HTML", "AB");
    /* U+007F..U+009f, when not a compatibility codepoint */
    TESTCASE("A&#x7f;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x81;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x8D;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x8F;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x90;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x9D;B", 0, ENCODING_NONE, "HTML", "AB");
    /* U+FDD0..U+FDEF */
    TESTCASE("A&#xFDD0;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#xFDEF;B", 0, ENCODING_NONE, "HTML", "AB");
    /* the last two codepoints in each plane */
    TESTCASE("A&#xFFFE;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#xFFFF;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x1FFFE;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x1FFFF;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x2FFFE;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x2FFFF;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x3FFFE;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x3FFFF;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x4FFFE;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x4FFFF;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x5FFFE;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x5FFFF;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x6FFFE;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x6FFFF;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x7FFFE;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x7FFFF;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x8FFFE;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x8FFFF;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x9FFFE;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x9FFFF;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#xAFFFE;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#xAFFFF;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#xBFFFE;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#xBFFFF;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#xCFFFE;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#xCFFFF;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#xDFFFE;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#xDFFFF;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#xEFFFE;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#xEFFFF;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#xFFFFE;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#xFFFFF;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x10FFFE;B", 0, ENCODING_NONE, "HTML", "AB");
    TESTCASE("A&#x10FFFF;B", 0, ENCODING_NONE, "HTML", "AB");

    /* HTML: some of the more obscure named character references.  The
     * tricky part is testing the case sensitivity and unusual character
     * generation of the HTML character reference matching code, while
     * the search normalisation code gets in the way. */

    /* &alpha; and &Alpha; are both defined but both get normalised
     * to GREEK CAPITAL LETTER ALPHA */
    TESTCASE("A&alpha;B", 0, ENCODING_NONE, "HTML", "AΑB");
    TESTCASE("A&Alpha;B", 0, ENCODING_NONE, "HTML", "AΑB");
    /* &clubs; is defined, &Clubs is not */
    TESTCASE("A&clubs;B", 0, ENCODING_NONE, "HTML", "A♣B");
    TESTCASE("A&Clubs;B", 0, ENCODING_NONE, "HTML", "A"UTF8_REPLACEMENT"B");
    /* &fjlig; is defined to emit a 2-codepoint sequence */
    TESTCASE("A&fjlig;B", 0, ENCODING_NONE, "HTML", "AFJB");
    /* &ycirc; emits a codepoint which is then normalised and capitalised */
    TESTCASE("A&ycirc;B", 0, ENCODING_NONE, "HTML", "AYB");
    /* &uparrow; and &UpArrow; are both defined to the same codepoint,
     * which survives normalisation intact, but neither &UParrow; nor
     * &upARROW; are defined.  &Uparrow is defined to a *different*
     * codepoint which also survives normalisation. */
    TESTCASE("A&uparrow;B", 0, ENCODING_NONE, "HTML", "A↑B");
    TESTCASE("A&Uparrow;B", 0, ENCODING_NONE, "HTML", "A⇑B");
    TESTCASE("A&UpArrow;B", 0, ENCODING_NONE, "HTML", "A↑B");
    TESTCASE("A&UParrow;B", 0, ENCODING_NONE, "HTML", "A"UTF8_REPLACEMENT"B");
    TESTCASE("A&upARROW;B", 0, ENCODING_NONE, "HTML", "A"UTF8_REPLACEMENT"B");

    /* &nonesuch; is most definitely not defined */
    TESTCASE("A&nonesuch;B", 0, ENCODING_NONE, "HTML", "A"UTF8_REPLACEMENT"B");
}
#undef TESTCASE

/* vim: set ft=c: */
