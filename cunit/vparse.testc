#include "cunit/cunit.h"
#include "xmalloc.h"
#include "vparse.h"

static void test_double_end(void)
{
    char card[] = "BEGIN:VCARD\nEND:VCARD\nEND:VCARD";
    struct vparse_state vparser;
    memset(&vparser, 0, sizeof(struct vparse_state));
    vparser.base = card;
    int vr = vparse_parse(&vparser, 0);
    CU_ASSERT_EQUAL(vr, PE_MISMATCHED_CARD);
}

static void test_control_chars(void)
{
#define TESTCASE(in, flag, wanterr) \
    { \
        struct vparse_state vparser; \
        memset(&vparser, 0, sizeof(struct vparse_state)); \
        vparse_set_multival(&vparser, "adr"); \
        vparser.base = (in); \
        vparser.ctrl = flag; \
        int vr = vparse_parse(&vparser, 0); \
        CU_ASSERT_EQUAL(vr, (wanterr)); \
        vparse_free(&vparser); \
    }

    char ctl_in_propname[] =
        "BEGIN:VCARD\r\n"
        "VERSION:3.0\r\n"
        "N\bOTE:Weird control chars\r\n"
        "REV:2008-04-24T19:52:43Z\r\n"
        "END:VCARD\r\n";

    char ctl_in_propval1[] =
        "BEGIN:VCARD\r\n"
        "VERSION:3.0\r\n"
        "NOTE:Weird control\b chars\r\n"
        "REV:2008-04-24T19:52:43Z\r\n"
        "END:VCARD\r\n";

    char ctl_in_propval2[] =
        "BEGIN:VCARD\r\n"
        "VERSION:3.0\r\n"
        /* Newline forces parser to switch to property name state */
        "NOTE:Weird control\n\bchars\r\n"
        "REV:2008-04-24T19:52:43Z\r\n"
        "END:VCARD\r\n";

    char ctl_in_propval3[] =
        "BEGIN:VCARD\r\n"
        "VERSION:3.0\r\n"
        /* Multivalue field, separated by semicolon */
        "ADR:;;123 Main Street;Any Town;CA;91921-1234;U.S.\x01\r\n"
        "REV:2008-04-24T19:52:43Z\r\n"
        "END:VCARD\r\n";

    char ctl_in_paraname[] =
        "BEGIN:VCARD\r\n"
        "VERSION:4.0\r\n"
        "EMAIL;\x01TYPE\x03=work:foo@local\r\n"
        "END:VCARD\r\n";

    char ctl_in_paraval1[] =
        "BEGIN:VCARD\r\n"
        "VERSION:4.0\r\n"
        "EMAIL;TYPE=w\x1bork:foo@local\r\n"
        "END:VCARD\r\n";

    char ctl_in_paraval2[] =
        "BEGIN:VCARD\r\n"
        "VERSION:4.0\r\n"
        /* control char in quoted param value */
        "EMAIL;TYPE=\"\x1bork\":foo@local\r\n"
        "END:VCARD\r\n";

    TESTCASE(ctl_in_propname, VPARSE_CTRL_REJECT, PE_ILLEGAL_CHAR);
    TESTCASE(ctl_in_propval1, VPARSE_CTRL_REJECT, PE_ILLEGAL_CHAR);
    TESTCASE(ctl_in_propval2, VPARSE_CTRL_REJECT, PE_ILLEGAL_CHAR);
    TESTCASE(ctl_in_propval3, VPARSE_CTRL_REJECT, PE_ILLEGAL_CHAR);
    TESTCASE(ctl_in_paraname, VPARSE_CTRL_REJECT, PE_ILLEGAL_CHAR);
    TESTCASE(ctl_in_paraval1, VPARSE_CTRL_REJECT, PE_ILLEGAL_CHAR);
    TESTCASE(ctl_in_paraval2, VPARSE_CTRL_REJECT, PE_ILLEGAL_CHAR);

    TESTCASE(ctl_in_propname, VPARSE_CTRL_SKIP, PE_OK);
    TESTCASE(ctl_in_propval1, VPARSE_CTRL_SKIP, PE_OK);
    TESTCASE(ctl_in_propval2, VPARSE_CTRL_SKIP, PE_NAME_EOL);
    TESTCASE(ctl_in_propval3, VPARSE_CTRL_SKIP, PE_OK);
    TESTCASE(ctl_in_paraname, VPARSE_CTRL_SKIP, PE_OK);
    TESTCASE(ctl_in_paraval1, VPARSE_CTRL_SKIP, PE_OK);
    TESTCASE(ctl_in_paraval2, VPARSE_CTRL_SKIP, PE_OK);

#undef TESTCASE
}

static void test_crlf(void)
{
#define TESTCASE(in, wanterr) \
    { \
        struct vparse_state vparser; \
        memset(&vparser, 0, sizeof(struct vparse_state)); \
        vparse_set_multival(&vparser, "adr"); \
        vparser.base = (in); \
        int vr = vparse_parse(&vparser, 0); \
        CU_ASSERT_EQUAL(vr, (wanterr)); \
        vparse_free(&vparser); \
    }

    char crlf[] =
        "BEGIN:VCARD\r\n"
        "VERSION:3.0\r\n"
        "NOTE:All lines end on CRLF\r\n"
        "REV:2008-04-24T19:52:43Z\r\n"
        "END:VCARD\r\n";

    char lf[] =
        "BEGIN:VCARD\n"
        "VERSION:3.0\n"
        "NOTE:All lines end on LF\n"
        "REV:2008-04-24T19:52:43Z\n"
        "END:VCARD\n";

    char cr[] =
        "BEGIN:VCARD\r"
        "VERSION:3.0\r"
        /* This one is rejected */
        "NOTE:All lines end on CR\r"
        "REV:2008-04-24T19:52:43Z\r"
        "END:VCARD\r";

    char mixed[] =
        "BEGIN:VCARD\n"
        "VERSION:3.0\n"
        "NOTE:Some lines end on CRLF, some on LF\r\n"
        "REV:2008-04-24T19:52:43Z\r\n"
        "END:VCARD\n";

    char extra_cr[] =
        "BEGIN:VCARD\r\n"
        "VERSION:3.0\r\n"
        "NOTE:An extra CR before CRLF\r\r\n"
        "REV:2008-04-24T19:52:43Z\r\n"
        "END:VCARD\r\n";

    char lflf[] =
        "BEGIN:VCARD\r\n"
        "VERSION:3.0\r\n"
        "NOTE:Two LF make one empty line\n\n"
        "REV:2008-04-24T19:52:43Z\r\n"
        "END:VCARD\r\n";

    char lonely_cr[] =
        "BEGIN:VCARD\r\n"
        "VERSION:3.0\r\n"
        /* Probably too forgiving. This one could be rejected */
        "NOTE:One lonely \r in the middle of text\r\n"
        "REV:2008-04-24T19:52:43Z\r\n"
        "END:VCARD\r\n";

    TESTCASE(crlf, PE_OK);
    TESTCASE(lf, PE_OK);
    TESTCASE(cr, PE_FINISHED_EARLY);
    TESTCASE(mixed, PE_OK);
    TESTCASE(extra_cr, PE_OK);
    TESTCASE(lflf, PE_OK);
    TESTCASE(lonely_cr, PE_OK);

#undef TESTCASE
}
