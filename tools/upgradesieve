#!/bin/sh
exec perl -x -S $0 ${1+"$@"} # -*-perl-*-
#!perl -w
# script to upgrade sievedir from imapd 1.6.13
# make sure you run it as the cyrus user
#!/usr/bin/perl
#
# Copyright (c) 1994-2008 Carnegie Mellon University.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in
#    the documentation and/or other materials provided with the
#    distribution.
#
# 3. The name "Carnegie Mellon University" must not be used to
#    endorse or promote products derived from this software without
#    prior written permission. For permission or any legal
#    details, please contact
#      Carnegie Mellon University
#      Center for Technology Transfer and Enterprise Creation
#      4615 Forbes Avenue
#      Suite 302
#      Pittsburgh, PA  15213
#      (412) 268-7393, fax: (412) 268-7395
#      innovation@andrew.cmu.edu
#
# 4. Redistributions of any form whatsoever must retain the following
#    acknowledgment:
#    "This product includes software developed by Computing Services
#     at Carnegie Mellon University (http://www.cmu.edu/computing/)."
#
# CARNEGIE MELLON UNIVERSITY DISCLAIMS ALL WARRANTIES WITH REGARD TO
# THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
# AND FITNESS, IN NO EVENT SHALL CARNEGIE MELLON UNIVERSITY BE LIABLE
# FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
# AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
# OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#
# $Id: upgradesieve,v 1.8.2.1 2009/12/28 21:51:56 murch Exp $

if ($] !~ /^5\..*/) {
  # uh-oh. this isn't perl 5.
  foreach (split(/:/, $ENV{PATH})) { # try to find "perl5".
    exec("$_/perl5", "-x", "-S", $0, @ARGV) if (-x "$_/perl5");
  }
  # we failed. bail.
  die "Your perl is too old; I need perl 5.\n";
}

# load the real script. this is isolated in an 'eval' so perl4 won't
# choke on the perl5-isms.
eval join("\n", <DATA>);
if ($@) { die "$@"; }

__END__
require 5;

$| = 1;

if (($#ARGV > -1) && ("-f" eq $ARGV[0])) {
    $force = 1;
    shift @ARGV;
}
if ((($#ARGV > -1) && ($ARGV[0] eq "-h")) || ($#ARGV > 0)) {
    print "usage: upgradesieve [-f] [imapd.conf]\n";
    print "       -f keep going on errors\n";
    exit;
}

sub ouch {
    my $msg = shift;

    if ($force) {
	print "error: $msg\n";
    } else {
	print "fatal error: $msg\n";
	exit 1;
    }
}

sub read_conf {
    my $file = shift;

    open CONF, $file or die "can't open $file";
    while (<CONF>) {
	if (/^#/) { 
	    next; 
	}
	if (/\@include:\s+(.*)$/) {
	    push @configs, $1;
	}
        if (/^sievedir:\s+(.*)$/) {
	    $sievedir = $1;
	    print "you are using $sievedir as your sieve directory.\n";
        }
    }
    close CONF;
}

$imapdconf = shift || "/etc/imapd.conf";

$sievedir = "/usr/sieve";

push @configs, $imapdconf;

while ($conf = shift @configs) {
    read_conf($conf);
}

print "upgrading sievedir $sievedir...";
chdir $sievedir or die "couldn't change to $sievedir";
foreach $i ("a".."z") {
    print "$i ";
    if (! chdir $i) {
	ouch "couldn't chdir to $i";
	next;
    }

    # upgrade single file to directory
    opendir (D, ".");
    while ($f = readdir D) {
	next if ($f =~ /^\./s);
	next if (-d $f);

	rename($f, ".$f")
	    or ouch "couldn't move $f to .$f";

	mkdir ($f, 0755)
	    or ouch "couldn't mkdir $f";

	rename(".$f", "$f/$f.script")
	    or ouch "couldn't move .$f to $f/$f.script";

	link("$f/$f.script", "$f/default")
	    or ouch "couldn't link $f.script to default";
    }
    closedir D;

    # upgrade hard links to symlinks
    opendir (D, ".");
    while ($d = readdir D) {
	next if ($d =~ /^\./s);
	if (! -d $d) {
	    ouch "expected $d to be a directory";
	    next;
	}

	if (! chdir $d) {
	    ouch "couldn't chdir to $d";
	    next;
	}
	
	opendir DIR, ".";
	while ($file = readdir DIR) {
	    next if (!($file =~ /\.script$/));
	    
	    # print "considering $file... ";
	    ($dev, $ino, $mode, $nlink, @rest) = stat $file;
	    if ($nlink == 2) {
		# print "making active... ";
		symlink $file, "default.NEW";
		rename "default.NEW", "default";
	    }
	    # print "\n";
	}
	
	closedir DIR;
	chdir "..";
    }
    closedir D;

    # back to "/usr/sieve"
    chdir "..";
}

print "done\n";
